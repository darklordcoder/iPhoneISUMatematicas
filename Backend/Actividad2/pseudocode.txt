// --- DEFINICIÓN DE ESTRUCTURAS DE DATOS ---
// Estructura para una asignación individual
ESTRUCTURA Assignment:
  Empleado COMO Entero
  Proyecto COMO Entero
  Eficiencia COMO Double
FIN ESTRUCTURA

// Estructura para la solución completa
ESTRUCTURA AssignmentSolution:
  Status COMO Solver.ResultStatus
  OptimalEfficiency COMO Double
  Assignments COMO Lista_De_Assignment
  Message COMO String (opcional)

  // Constructor (inicializa la lista de asignaciones)
  CONSTRUCTOR():
    Assignments = NUEVA Lista_De_Assignment()
  FIN CONSTRUCTOR
FIN ESTRUCTURA

// --- CLASE PRINCIPAL ---
CLASE AssignmentSolver:

  // --- MÉTODO PRIVADO PARA RESOLVER EL PROBLEMA ---
  // Recibe los datos del problema y devuelve un objeto AssignmentSolution
  FUNCIÓN PRIVADA ESTATICA SolveAssignmentProblem(
      efficiencyMatrix COMO Matriz_De_Doubles[N, M],
      maxAssignmentsPerEmployee COMO Entero,
      maxEmployeesPerProject COMO Array_De_Enteros[M]
  ) DEVUELVE AssignmentSolution:

    // Crear instancia de la solución a devolver
    CREAR result COMO NUEVA AssignmentSolution()

    // Obtener dimensiones
    DEFINIR numEmployees COMO Entero = Dimension_0(efficiencyMatrix)
    DEFINIR numProjects COMO Entero = Dimension_1(efficiencyMatrix)

    // --- VALIDACIONES INICIALES ---
    // Validar longitud de maxEmployeesPerProject
    SI Longitud(maxEmployeesPerProject) != numProjects ENTONCES
      result.Status = Solver.ResultStatus.NOT_SOLVED
      result.Message = "Error: La longitud del array maxEmployeesPerProject debe coincidir con el número de proyectos."
      DEVOLVER result
    FIN SI

    // --- 1. Inicialización del Solver ---
    CREAR solver = Solver.CreateSolver("CBC")

    // Validar creación del solver
    SI solver ES NULL ENTONCES
      result.Status = Solver.ResultStatus.NOT_SOLVED
      result.Message = "Error: No se pudo crear el solver CBC."
      DEVOLVER result
    FIN SI

    // --- 3. Crear las Variables de Decisión Binarias x[i, j] ---
    CREAR variables COMO Matriz_De_Variable[numEmployees, numProjects]
    PARA i DESDE 0 HASTA numEmployees - 1:
      PARA j DESDE 0 HASTA numProjects - 1:
        variables[i, j] = solver.MakeBoolVar($"x_{i}_{j}")
      FIN PARA
    FIN PARA

    // --- 4. Definir las Restricciones Lineales ---
    // Restricción 1: Límite de asignaciones por empleado
    PARA i DESDE 0 HASTA numEmployees - 1:
      CREAR assignmentsPerEmployeeExpr = NUEVA LinearExpr()
      PARA j DESDE 0 HASTA numProjects - 1:
        assignmentsPerEmployeeExpr += variables[i, j]
      FIN PARA
      solver.Add(assignmentsPerEmployeeExpr <= maxAssignmentsPerEmployee)
    FIN PARA

    // Restricción 2: Límite de empleados por proyecto
    PARA j DESDE 0 HASTA numProjects - 1:
      CREAR employeesPerProjectExpr = NUEVA LinearExpr()
      PARA i DESDE 0 HASTA numEmployees - 1:
        employeesPerProjectExpr += variables[i, j]
      FIN PARA
      solver.Add(employeesPerProjectExpr <= maxEmployeesPerProject[j])
    FIN PARA

    // --- 5. Definir la Función Objetivo (Maximizar Eficiencia Total) ---
    CREAR objective COMO NUEVA LinearExpr()
    PARA i DESDE 0 HASTA numEmployees - 1:
      PARA j DESDE 0 HASTA numProjects - 1:
        objective += efficiencyMatrix[i, j] * variables[i, j]
      FIN PARA
    FIN PARA
    solver.Maximize(objective)

    // --- 6. Resolver el Problema ---
    result.Status = solver.Solve()

    // --- 7. Evaluar y Procesar Resultados ---
    SI result.Status == Solver.ResultStatus.OPTIMAL ENTONCES
      result.OptimalEfficiency = solver.Objective().Value()
      result.Message = $"Solución Óptima Encontrada. Eficiencia Total Máxima = {result.OptimalEfficiency}"

      // Recopilar las asignaciones
      PARA i DESDE 0 HASTA numEmployees - 1:
        PARA j DESDE 0 HASTA numProjects - 1:
          // Usar una tolerancia pequeña (0.9 en la implementación)
          SI variables[i, j].SolutionValue() > 0.9 ENTONCES
            CREAR nuevaAsignacion COMO NUEVA Assignment CON {
              Employee = i,
              Project = j,
              Efficiency = efficiencyMatrix[i, j]
            }
            AÑADIR nuevaAsignacion A result.Assignments
          FIN SI
        FIN PARA
      FIN PARA
    SINO SI result.Status == Solver.ResultStatus.FEASIBLE ENTONCES
      result.Message = "Se encontró una solución factible, pero no necesariamente óptima."
      // Aquí se podría también extraer la solución factible si fuera necesario
    SINO SI result.Status == Solver.ResultStatus.INFEASIBLE ENTONCES
      result.Message = "El problema es infactible (no hay asignación posible que cumpla las restricciones)."
    SINO SI result.Status == Solver.ResultStatus.UNBOUNDED ENTONCES
      result.Message = "El problema es no acotado."
    SINO
      result.Message = $"El solver terminó con estado: {result.Status}"
    FIN SI

    // Devolver el objeto de solución completo
    DEVOLVER result

  FIN FUNCIÓN

  // --- MÉTODO PÚBLICO PARA EJECUTAR EL SOLVER ---
  // Este método actúa como punto de entrada y llama a SolveAssignmentProblem
  FUNCIÓN PÚBLICA ESTATICA RunSolver(
      efficiencyMatrix COMO Matriz_De_Doubles[N, M],
      maxAssignmentsPerEmployee COMO Entero,
      maxEmployeesPerProject COMO Array_De_Enteros[M]
  ) DEVUELVE AssignmentSolution:

    // Llamar al método privado que contiene la lógica principal
    DEFINIR solution COMO AssignmentSolution = SolveAssignmentProblem(
        efficiencyMatrix,
        maxAssignmentsPerEmployee,
        maxEmployeesPerProject
    )
    // Devolver la solución
    DEVOLVER solution

  FIN FUNCIÓN

FIN CLASE
